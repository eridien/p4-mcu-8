    
  eridien P4 motor controller MCU interface (version 0)
  -----------------------------------------------------
  (this file should match eridien/p4-mcu-8 respository)

  Each MCU is an I2C slave.  Each motor in each MCU has its own I2C address.
  Each motor state is independent (except for error which stops entire mcu).
  The MCU is coded for a PIC24F16KM202, other 16-bit mcus may work.
  There are 4 bipolar motors called A,B,C,D.
  Each motor has a limit switch, which is configurable.

  The MCU controller has a specific unusual meaning for a "step".
  It is a 1/8 micro-step which lets distance/speeds fit in 16-bit uint.

  If using a 20-tooth GT2 pulley, then one step is 1/40 mm.
        steps/rev:        1600
        dist/rev:           40 mm
        dist/step         1/40 mm
        max distance:   +- 800 mm  -32,768 to 32,767

  all speed is in steps/sec
  accel is 0..7: none, 4000, 8000, 20000, 40000, 80000, 200000, 400000 steps/sec/sec
  for 1/40 mm steps: none, 100, 200, 500, 1000, 2000, 5000, 10000 mm/sec/sec
  
  Any I2C write to MCU is a command.  Any read returns a 3-byte status.
  All commands are started immediately even when motor is busy (moving, homing, etc.)
  If needed, the host can check for finished by polling busy-bit in state
  No commands are buffered like G-Code commands
  (So commands can be linked to async operations such as clicking on a webpage)
  Changed settings take effect immediately even when motor is busy

  -- one-byte commands --
  0001 0000  home        start homing (or fake home if no limit switch)
  0001 0001  reserved
  0001 0010  stop        soft stop, decelerates, no reset
  0001 0011  stopRst     decelerates and then resets
  0001 0100  reset       hard stop (power down motor with immediate reset)
  0001 0101  motorOn     (power up motor by removing reset)
  0001 0110  fakeHome    set curpos to home pos value setting, turn motor on
  0000 01ss  specialRead next status bytes 2-3 are special value 
                              (ss 0: test pos, ss 1: misc, ss 2: reserved)

  -- 2-byte extra commands --
  0000 0111 cccc cccc  
	  0000 1xx0  clamp limit sw xx (force closed, i.e. ground it)
	  0000 1xx1  unclamp limit sw xx (normal)

  -- 2-byte move command --
  1aaa aaaa    top 7 bits of target position (always positive)
    aaaa aaaa  bottom 8 bits

  -- 3-byte move command --
  0000 0001     set position
    aaaa aaaa   signed target position
    aaaa aaaa   bottom 8 bits

  -- 3-byte speed-move command --
  01ss ssss     set speed setting to value s times 256
    aaaa aaaa   signed target position
    aaaa aaaa   bottom 8 bits

  -- 5-byte accel-speed-move command --  
  0000 1ccc    set acceleration idx setting
    ssss ssss  top 8 bits of speed,
    ssss ssss  bottom 8 bits
    aaaa aaaa  signed target position
    aaaa aaaa  bottom 8 bits

  -- 2-byte jog command relative (no bounds checking, does not need to be homed)
  001d ssss    d: direction  
    ssss ssss  s: number of steps (12 bits)

  -- 3-byte jog command relative (no bounds checking, does not need to be homed)
  0000 0010
    aaaa aaaa  signed number of steps
    aaaa aaaa  bottom 8 bits

  -- 3-byte jog command absolute (no bounds checking, does not need to be homed)
  0000 0011
    aaaa aaaa  signed target position
    aaaa aaaa  bottom 8 bits

  -- 3-byte to 23-byte settings command --
  write may be short, only setting first entries
  0001 1111  load settings, all are two-byte, big-endian, 16-bit values
    acceleration rate table index 0..7, 0 is off
    default speed
    jerk (start/stop speed and above this speed acceleration is needed)
    min bounds (usually 0)
    max bounds
    reverse homing dir (0: normal backwards, 1:forwards)
    homing dir
    homing speed
    homing back-up speed
    home offset distance (final home distance from switch)
    home pos value (set cur pos to this value after homing, usually 0)
    limit switch control   (see below)
    backlash distance    
    max ustep value        5-wire unipolar must be 0    
    mcuClock;   // period of clock in usecs  (motor 0 applies to entire mcu)

  limit sw control word format for settings command above
  e000 tttt hhhh 000p
     e  0: disabled, 1:enabled
  tttt  limit switch activity timeout, no change for tttt*64 steps => closed
  hhhh: limit switch activity hysteresis, hhhh*32 steps must be same
     p: switch polarity, 0: closed is low,  1: high

  -- 3-byte status read --
  this is the only read format on i2c
  Error code is cleared on status read
    1) veee sboh  state byte
        v: version (1-bit)
      eee: error code (see below)
        s: flag that special status is in bytes 2 and 3
        b: busy     (homing, moving, or stopping)
        o: motor on (not in reset)
        h: homed    (motor has been homed since last reset)
    2) aaaa aaaa  signed motor position, top 8 bits (default, see special)
    3) aaaa aaaa  followed by bottom 8 bits

  Error codes for state byte above 
    MOTOR_FAULT_ERROR   0x10  missing, over-heated, or over-current driver chip
    OVERFLOW_ERROR      0x20  data received before last used
    CMD_DATA_ERROR      0x30  command format incorrect
    STEP_NOT_DONE_ERROR 0x40  step rate too fast for MCU
    BOUNDS_ERROR        0x50  position < min or > max setting when moving
    NO_SETTINGS         0x60  no settings
    NOT_HOMED           0x70  move cmd when not homed

specialRead test pos     (result of Command 0x04)
  aaaa aaaa    signed motor test position, top 8 bits
    aaaa aaaa  followed by bottom 8 bits
  motor position is stored for testing when homing opens limit switch backing up
  this allows testing to make sure no steps are missed when doing move/home
  This status read will have a state byte value of 0x08.

specialRead misc states  (result of Command 0x05)
  0000 0000 
    0000 000s
    s:  Limit switch active (after possible inversion)
  This status read will have a state byte value of 0x09.    
